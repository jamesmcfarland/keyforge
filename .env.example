# Database Configuration
DB_PASSWORD=keyforge_dev

# Kubernetes Configuration
# For local development, these defaults work with local k8s (OrbStack, Docker Desktop, etc.)
# For VPS deployment, set these to point to your k3s configuration:
#   KUBECONFIG_PATH=/root/.kube/config
#   KUBE_CACHE_PATH=/root/.kube/cache
#   KUBECONFIG=/root/.kube/config
KUBECONFIG_PATH=./.kube/config
KUBE_CACHE_PATH=./.kube/cache
KUBECONFIG=/app/.kube/config

# Kubernetes Host for Docker Container Access (deprecated - use KUBECONFIG instead)
# The IP address that Docker containers should use to reach k3s on the host
# Default: 172.17.0.1 (Docker bridge gateway IP on Linux)
# Note: k3s must be configured to listen on this interface (see DEPLOYMENT.md)
KUBE_HOST=172.17.0.1

# Database URL (optional - auto-generated from DB_PASSWORD if not set)
# DATABASE_URL=postgresql://keyforge:keyforge_dev@postgres:5432/keyforge

# Node Environment
NODE_ENV=development

# API Command
# For development: npm run dev
# For production: npm start
API_COMMAND=npm run dev

# CORS Configuration
# Comma-separated list of allowed origins for CORS
# Examples:
# - Local dev: CORS_ORIGINS=http://localhost:3001
# - Tailscale: CORS_ORIGINS=http://localhost:3001,http://100.x.x.x:3001,http://your-tailscale-hostname:3001
# - Production: CORS_ORIGINS=https://yourdomain.com
CORS_ORIGINS=http://localhost:3001

# Admin API Key for admin endpoints
# Generate with: openssl rand -hex 32
# This key is used to authenticate requests to /admin/* endpoints
ADMIN_API_KEY=your_secure_random_key_here

# Frontend API URL Configuration
# The URL the frontend uses to connect to the API
# Examples:
# - Local dev: VITE_API_BASE=http://localhost:3000
# - Tailscale: VITE_API_BASE=http://100.x.x.x:3000 or http://your-tailscale-hostname:3000
# - Production: VITE_API_BASE=https://api.yourdomain.com
VITE_API_BASE=http://localhost:3000

# JWT Authentication Configuration (for instance-level operations)
# Root JWT public key for verifying instance tokens (optional if not using JWT for instances)
# Generate a key pair using the JWT service and store the private key securely
# Format: Base64-encoded ECC P-256 public key in SPKI format
# Example generation (Node.js):
#   import { generateKeyPair } from './src/services/jwt-service.js'
#   const { publicKey, privateKey } = await generateKeyPair('root')
ROOT_JWT_PUBLIC_KEY=your_base64_encoded_public_key_here
